version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.5.1

commands:
  install-dependencies:
    description: Installs the dependencies for aws and ansible
    steps:
      - run:
          name: Install deps
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli ansible

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -H "token: f9de6f8d-265f-462f-a766-4fb174338787" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: npm-audit-frontend
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: npm-audit-backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Create inventory file with the backend and monitoring IP
          command: |
            echo "[web]" > ~/inventory.txt && \
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/inventory.txt
            echo "[monitor]" >> ~/inventory.txt && \
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:app,Values=prometheus" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e4:2b:d9:f9:33:df:41:d0:9a:86:17:f3:00:a4:aa:74"]
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8
    steps:
      - install-dependencies
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: f9de6f8d-265f-462f-a766-4fb174338787" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment
      - revert-migrations

  # Job to use a node image to build both the front and backend for later stages
  build-deployment:
    docker:
      - image: cimg/node:13.8
    steps:
      - install-dependencies
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build frontend objects
          command: |
            export BACKEND_IP=$(cat ~/inventory.txt | grep -A 1 "\[web\]$" | tail -n 1)
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo $API_URL
            cat frontend/.env
            cd frontend
            npm i
            npm run build
            tar -czvf ui.tar.gz dist
            mv ui.tar.gz ~/
      - run:
          name: Build backend objects
          command: |
            cd backend
            npm i
            npm run build
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> production.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> production.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> production.env
            echo "TYPEORM_PORT=5432" >> production.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> production.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> production.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> production.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> production.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> production.env
            cd ..
            tar -czvf server.tar.gz backend
            mv server.tar.gz ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - server.tar.gz
            - ui.tar.gz
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/
            tar -xzf ui.tar.gz
            ls
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e4:2b:d9:f9:33:df:41:d0:9a:86:17:f3:00:a4:aa:74"]
      - run:
          name: Deploy backend
          command: |
            mv ~/server.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/node:13.8
    steps:
      - install-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat ~/inventory.txt | grep -A 1 "\[web\]$" | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            for backoff in 1 2 3 4 5
            do
              if curl "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              fi
              echo "Failed to receive OK status. Waiting for $backoff seconds to reattempt the request."
              sleep $backoff
            done
            exit 1
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            for backoff in 1 2 3 4 5
            do
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              fi
              echo "Failed to receive 'Welcome' message. Waiting for $backoff seconds to reattempt the request."
              sleep $backoff
            done
            exit 1
      - destroy-environment
      - revert-migrations

  configure-monitoring:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e4:2b:d9:f9:33:df:41:d0:9a:86:17:f3:00:a4:aa:74"]
      - run:
          name: Configure node exporter
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-prometheus-node-exporter.yml
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  cleanup:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - install-dependencies
      - run:
          name: Remove all udapeople stacks older than current deployment
          command: |
            export ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo "WorkflowID: $ID"

            export LIST_STACKS="$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE)"
            echo "List Stacks Response..."
            echo $LIST_STACKS

            echo $LIST_STACKS | \
              jq -rc '.StackSummaries[]' | \
              egrep 'udapeople-(backend|frontend)-' | \
              jq -rc '{ StackName: .StackName, CreationTime: .CreationTime }' > CURRENT_STACKS.json
            echo "Current Stacks..."
            cat CURRENT_STACKS.json
            wc -l CURRENT_STACKS.json

            export TIMESTAMP="$(cat CURRENT_STACKS.json | \
              grep "$ID" | \
              jq -r '.CreationTime' | \
              sort | head -n 1)"
            echo "Earliest Creation Timestamp for this Workflow..."
            echo "$TIMESTAMP"

            export CLEANUP_STACKS=$(echo CURRENT_STACKS.json | \
              jq -r --arg timestamp "$TIMESTAMP" 'select( .CreationTime < $timestamp ) | .StackName')
            echo "Stacks to be Removed..."
            echo "$CLEANUP_STACKS"

            for stack in $CLEANUPSTACKS; do
              # Clean up frontend stack
              if [[ $stack =~ udapeople-frontend-.* ]]
              then
                echo "Removing frontend stack: $stack"
                ID=$(echo "$stack" | sed 's/udapeople-frontend-//')
                BUCKET_URL="s3://udapeople-${ID}"
                echo "Removing bucket: $BUCKET_URL"
                aws s3 rm $BUCKET_URL --recursive
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${ID}"
              fi

              # Clean up backend stack
              if [[ $stack =~ udapeople-backend-.* ]]
              then
                echo "Removing backend stack: $stack"
                aws cloudformation delete-stack --stack-name $stack
              fi
            done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - build-deployment:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [run-migrations, build-deployment]
      - deploy-backend:
          requires: [run-migrations, build-deployment]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - configure-monitoring:
          requires: [cloudfront-update]
      - cleanup:
          requires: [configure-monitoring]
