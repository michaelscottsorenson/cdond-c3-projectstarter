version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.5.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  notify-on-failure:
    description: sends a slack message when the pipeline fails
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      ## TODO: I'm not certain I need this.
      # - run:
      #     when: on_fail
      #     command: yum install -y jq

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm run test
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm run test
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: npm-audit-frontend
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: npm-audit-backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip jq
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Create inventory file with the backend IP
          command: |
            echo "[web]" > ~/inventory.txt && \
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # - destroy-environment ## TODO: will I need to clean up parital failures here?
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
   docker:
      - image: python:3.7-alpine3.11
   steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e4:2b:d9:f9:33:df:41:d0:9a:86:17:f3:00:a4:aa:74"]
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Install aws cli
          command: pip3 install --no-cache-dir awscli
      - run:
          name: Configure server
          command: ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
      # - destroy-environment
      - run:
          name: Install slack deps
          when: on_fail
          command: apk add --update curl jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: f9de6f8d-265f-462f-a766-4fb174338787" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      # - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  # Job to use a node image to build both the front and backend for later stages
  build-deployment:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -n 1 ~/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf ui.tar.gz dist
            mv ui.tar.gz ~/
      - run:
          name: Build backend objects
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -czvf server.tar.gz backend
            mv server.tar.gz ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - server.tar.gz
            - ui.tar.gz
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/
            tar -xzf ui.tar.gz
            ls
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-environment
      - run:
          name: Install slack deps
          when: on_fail
          command: yum install -y jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["e4:2b:d9:f9:33:df:41:d0:9a:86:17:f3:00:a4:aa:74"]
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            mv ~/server.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # - destroy-environment
      - run:
          name: Install slack deps
          when: on_fail
          command: apk add --update curl jq
      - slack/notify:
          event: fail
          template: basic_fail_1

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:
  default:
    jobs:
      - build-frontend:
          context:
            - slack-secrets
      - build-backend:
          context:
            - slack-secrets
      - test-frontend:
          context:
            - slack-secrets
          requires: [build-frontend]
      - test-backend:
          context:
            - slack-secrets
          requires: [build-backend]
      - scan-backend:
          context:
            - slack-secrets
          requires: [build-backend]
      - scan-frontend:
          context:
            - slack-secrets
          requires: [build-frontend]
      - deploy-infrastructure:
          context:
            - slack-secrets
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context:
            - slack-secrets
          requires: [deploy-infrastructure]
      - run-migrations:
          context:
            - slack-secrets
          requires: [configure-infrastructure]
      - build-deployment:
          context:
            - slack-secrets
          requires: [deploy-infrastructure]
      - deploy-frontend:
          context:
            - slack-secrets
          requires: [run-migrations, build-deployment]
      - deploy-backend:
          context:
            - slack-secrets
          requires: [run-migrations, build-deployment]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
